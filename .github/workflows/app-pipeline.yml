name: Build and deploy Python app to Azure Container App

env:
  AZURE_WEBAPP_NAME: python-postgres-azure
  PYTHON_VERSION: "3.11"

on:
  push:
    branches: ["main"]
    paths:
      - "**"
      - "!infrastructure/**"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: pip install black flake8

      - name: Check Formatting and linting
        run: black ./ --check && flake8

  static-code-analysis:
    runs-on: ubuntu-latest
    needs:
      - linting
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: pip install bandit

      - name: SAST
        run: bandit -r ./rates -c .bandit.yaml

  dependency-vulnerability-analysis:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rates
    needs:
      - linting
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: pip install safety

      - name: Safety Check
        run: safety check --file requirements.txt.lock --full-report

  placeholder-unit-test:
    runs-on: ubuntu-latest
    needs:
      - linting
    steps:
      - name: Placeholder for unit test
        run: |
          echo "Implement Unit test and execute them here in the pipeline"
  
  bdd-test:
    runs-on: ubuntu-latest
    needs:
      - linting
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Run Behave BDD Tests
        run: |
          make start-app-db
          pip install behave requests
          echo "****** Running behave tests ******"
          behave
          make stop-app-db
  
  docker-lint-build-scan-push:
    runs-on: ubuntu-latest
    needs:
      - static-code-analysis
      - dependency-vulnerability-analysis
      - placeholder-unit-test
      - bdd-test
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Dependencies
        run: |
          echo " ** Install Checkov **"
          pip install checkov
          echo "** Install Trivy **"
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Dockerfile vulnerability Analysis
        run: |
          checkov -d . --framework dockerfile --skip-check CKV_DOCKER_2
      
      - name: Build Docker Image
        run: |
          docker build -t "${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_id }}" .
          echo "docker image built successfully"
      
      - name: Scan Docker Image Vulnerabilities
        run: |
          trivy image "${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_id }}"
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        run: |
          docker tag "${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_id }}" "${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest"
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_id }}"
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest"

  deploy-to-az-container-apps:
    runs-on: ubuntu-latest
    needs:
      - docker-lint-build-scan-push
    steps:
      - name: Placeholder for app deployment
        run: |
          echo "Printing the docker image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_id }}"