name: Pipeline to automatically deploy Terraform Infrastructure

env:
  PYTHON_VERSION: "3.11"

on:
  push:
    branches: ["main"]
    paths:
      - "infrastructure/**"
      - ".github/workflows/infra-pipeline.yml"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write # This is required for requesting the JWT

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: actions/setup-go@v4
        with:
          go-version: 1.21.0

      - name: Download Go modules
        run: go mod download
        working-directory: infrastructure/bootstrap/tests/unit

      - name: Run Unit Terratest (via Go)
        run: go test -timeout 5m
        working-directory: infrastructure/bootstrap/tests/unit
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
          ARM_USE_OIDC: true

  terraform-compliance:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/bootstrap
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Python version
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install terraform terraform-compliance
        run: |
          pip install terraform-compliance

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      
      - name: Terraform Init
        id: init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Plan
        run: |
          terraform init -backend-config=./backend-config.hcl && terraform plan -out plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Compliance
        run: |
          terraform-compliance -f tests/compliance -p plan

  tf-code-lint-and-sast:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/bootstrap
    steps:
      - uses: actions/checkout@v4

      - name: Install TFSec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      - name: TFSec Static Code Analysis
        run: tfsec .

      - name: Install TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Lint TF code
        run: tflint --chdir ./
